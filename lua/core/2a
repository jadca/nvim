using MediatR;
using System.Threading;
using System.Threading.Tasks;
using System;
using Minedu.ProcesoContratacion.Application.Mapper.Calificacion;
using Minedu.ProcesoContratacion.Application.Repositories.Calificacion;
using System.Linq;
using Minedu.ProcesoContratacion.Application.Responses.Calificacion;
using Minedu.ProcesoContratacion.Domain.Enumerators;
using Minedu.ProcesoContratacion.Application.Repositories.Catalogos;
using Minedu.ProcesoContratacion.Application.Responses.CatalogoItem;
using Minedu.ProcesoContratacion.Application.Mapper.CatalogoItem;
using Minedu.ProcesoContratacion.Application.Repositories;
using Minedu.ProcesoContratacion.Application.Repositories.EtapaProceso;
using Minedu.ProcesoContratacion.Application.Services;
using Minedu.ProcesoContratacion.Application.Util;
using Serilog;
using Minedu.ProcesoContratacion.Application.DTO.Calificacion;
using Minedu.ProcesoContratacion.Application.Repositories.DesarrollosEtapaProceso;
using AutoMapper;

namespace Minedu.ProcesoContratacion.Application.Features.Calificacion.Commands
{
    public class GenerarOrdenCommand : IRequestHandler<GenerarOrdenViewModel, int>
    {
        readonly private ICalificacionRepository _repository;
        readonly private IEtapaProcesoRepository _etapaProcesoRepository;
        readonly private ICatalogoItemRepository _catalogoItemRepository;
        readonly private IUnitOfWork _IUnitOfWork;
        private readonly IFlujoEstadoService _flujoEstadoService;
        private readonly IDesarrolloEtapaProcesoRepository _desarrolloEtapaProcesoRepository;
        private readonly IMapper _mapper;
        public GenerarOrdenCommand(
                    ICalificacionRepository repository,
                    IEtapaProcesoRepository etapaProcesoRepository,
                    ICatalogoItemRepository catalogoItemRepository,
                    IUnitOfWork IUnitOfWork,
                    IFlujoEstadoService flujoEstadoService,
                    IDesarrolloEtapaProcesoRepository desarrolloEtapaProcesoRepository,
            IMapper mapper
                    )
        {
            _repository = repository;
            _etapaProcesoRepository = etapaProcesoRepository;
            _catalogoItemRepository = catalogoItemRepository;
            _IUnitOfWork = IUnitOfWork;
            _flujoEstadoService = flujoEstadoService;
            _desarrolloEtapaProcesoRepository = desarrolloEtapaProcesoRepository;
            _mapper = mapper;
        }

        public async Task<int> Handle(GenerarOrdenViewModel request, CancellationToken cancellationToken)
        {
            int result = 0;
            try
            {
                _IUnitOfWork.BeginTransaction();

                var responseEtapaProceso = await _etapaProcesoRepository.ObtenerEtapaProceso(request.idEtapaProceso, request.codigoCentroTrabajoMaestro);
                var codigoResultadoCalificacion = request.idResultadoCalificacion;
                //ResultadoCalificacion
                var catalogosItemResultadoCalificacion = await _catalogoItemRepository.ListarIdPorCodigoCatalogo((int)CatalogoCodigoEnum.ResultadoCalificacion);
                var ResultadoCalificacion = catalogosItemResultadoCalificacion.Select(c => (CatalogoItemViewModel)ObtenerInformacionCatalogoItemMap.MapToViewModel(c));
                var requestResultadoCalificacion = ResultadoCalificacion.FirstOrDefault(x => x.codigo == codigoResultadoCalificacion);
                request.idResultadoCalificacion = requestResultadoCalificacion.id;

                var hoy = DateTime.Now;
                var post_request = GenerarOrdenMap.MapToDTO(request);
                post_request.fechaModificacion = hoy;
                var limpia = await _repository.LimpiarOrdenMerito(1,1);
                result = await _repository.GenerarOrdenCalificacion(post_request);

                var desarrolloProceso = await _desarrolloEtapaProcesoRepository.ObtenerDatosProcesoPorEtapaCentroTrabajo(
                                            (int)request.idEtapaProceso,
                                            request.codigoCentroTrabajoMaestro);

                var cuadroActualizado = _mapper.Map<GenerarOrdenViewModel, ActualizarEstadoDTO>(request);
                cuadroActualizado.idDesarrolloProceso = desarrolloProceso.idEstadoDesarrollo.GetValueOrDefault();

                var actualizarCuadroActualizado = await _repository.ActualizarCuadrosActualizados(cuadroActualizado);
                if (codigoResultadoCalificacion == (int)ResultadoCalificacionEnum.Preliminar)
                {
                    var finalizarCalificacion = new GenerarOrdenDeMeritoPreliminarPUN(
                        request.idFlujoEstado,
                        request.usuarioModificacion,
                        Utility.GetRemoteIpAddress()
                        );
                    await _flujoEstadoService.ActualizarMetaData(finalizarCalificacion);
                }
                if (codigoResultadoCalificacion == (int)ResultadoCalificacionEnum.Final)
                {

                }
                _IUnitOfWork.Commit();
            }
            catch (Exception ex)
            {
                _IUnitOfWork.Rollback();
                Log.Error(ex, ex.StackTrace);
                throw new Exception(ex.Message, ex);
            }
            return result;
        }
    }
}
